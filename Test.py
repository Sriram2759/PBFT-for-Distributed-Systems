# -*- generated by 1.0.12 -*-
import da
PatternExpr_219 = da.pat.TuplePattern([da.pat.ConstantPattern('Liveness'), da.pat.FreePattern('pv'), da.pat.FreePattern('nv'), da.pat.FreePattern('clientID')])
PatternExpr_253 = da.pat.TuplePattern([da.pat.ConstantPattern('ReplicaInfo'), da.pat.FreePattern('executedlist'), da.pat.FreePattern('messageloglen'), da.pat.FreePattern('pid')])
PatternExpr_289 = da.pat.TuplePattern([da.pat.ConstantPattern('Liveness'), da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)])
PatternExpr_297 = da.pat.FreePattern('a')
PatternExpr_331 = da.pat.TuplePattern([da.pat.ConstantPattern('ReplicaInfo'), da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)])
PatternExpr_339 = da.pat.FreePattern('a')
_config_object = {'channnel': 'fifo', 'clock': 'lamport'}
import sys
sys.setrecursionlimit(100000)
import time
import random
import hashlib

class Test(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._TestReceivedEvent_2 = []
        self._TestReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_TestReceivedEvent_0', PatternExpr_219, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Test_handler_218]), da.pat.EventPattern(da.pat.ReceivedEvent, '_TestReceivedEvent_1', PatternExpr_253, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Test_handler_252]), da.pat.EventPattern(da.pat.ReceivedEvent, '_TestReceivedEvent_2', PatternExpr_289, sources=[PatternExpr_297], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_TestReceivedEvent_3', PatternExpr_331, sources=[PatternExpr_339], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, nclients, nreplicas, byzantineset, **rest_430):
        super().setup(nclients=nclients, nreplicas=nreplicas, byzantineset=byzantineset, **rest_430)
        self._state.nclients = nclients
        self._state.nreplicas = nreplicas
        self._state.byzantineset = byzantineset
        self._state.view_changed_happened = 'False'
        self._state.allreplicainfo = []
        self._state.totalmessagesinvolved = 0
        self._state.is_syystem_safe = ''
        self._state.is_system_live = ''

    def run(self):
        self.liveness_check()
        self.safety_check()
        self.send(('Test-done', self._state.is_syystem_safe, self._state.is_system_live, self._state.totalmessagesinvolved, self._state.view_changed_happened), to=self.parent())
        self.output('Test Module Terminating')
        self.send(('Test-done',), to=self.parent())

    def liveness_check(self):
        super()._label('_st_label_284', block=False)
        _st_label_284 = 0
        while (_st_label_284 == 0):
            _st_label_284 += 1
            if (len({a for (_, (_, _, a), (_ConstantPattern308_, _, _, _)) in self._TestReceivedEvent_2 if (_ConstantPattern308_ == 'Liveness')}) == self._state.nclients):
                self._state.is_system_live = 'Yes'
                _st_label_284 += 1
            else:
                super()._label('_st_label_284', block=True)
                _st_label_284 -= 1

    def safety_check(self):
        super()._label('_st_label_326', block=False)
        _st_label_326 = 0
        while (_st_label_326 == 0):
            _st_label_326 += 1
            if (len({a for (_, (_, _, a), (_ConstantPattern350_, _, _, _)) in self._TestReceivedEvent_3 if (_ConstantPattern350_ == 'ReplicaInfo')}) == self._state.nreplicas):
                for i in range(1, len(self._state.allreplicainfo)):
                    self.output('i = ', i)
                    if (not (self._state.allreplicainfo[i] == self._state.allreplicainfo[(i - 1)])):
                        self.output('The sytem is not safe')
                        self._state.is_syystem_safe = 'No'
                        break
                if (i == (len(self._state.allreplicainfo) - 1)):
                    self.output('the system is safe since all non faulty replicas followed same sequence')
                    self.output('total amount of messages sent = ', self._state.totalmessagesinvolved)
                    self._state.is_syystem_safe = 'Yes'
                _st_label_326 += 1
            else:
                super()._label('_st_label_326', block=True)
                _st_label_326 -= 1

    def _Test_handler_218(self, pv, nv, clientID):
        if ((nv - pv) >= 1):
            self._state.view_changed_happened = 'True'
            self._state.is_system_live = 'Yes'
        self.output('ClientID, View Changed = , is_system_live = ', clientID, self._state.view_changed_happened, self._state.is_system_live)
    _Test_handler_218._labels = None
    _Test_handler_218._notlabels = None

    def _Test_handler_252(self, executedlist, messageloglen, pid):
        self._state.totalmessagesinvolved = (self._state.totalmessagesinvolved + messageloglen)
        if (not (pid in self._state.byzantineset)):
            self._state.allreplicainfo.append(executedlist)
        self.output(self._state.allreplicainfo, 'allreplicainfo')
    _Test_handler_252._labels = None
    _Test_handler_252._notlabels = None
